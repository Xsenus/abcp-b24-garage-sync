name: Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Lint (quick)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m compileall -q abcp_b24_garage_sync

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Prepare remote folders
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "\
            mkdir -p '${{ secrets.DEPLOY_PATH }}'/current '${{ secrets.DEPLOY_PATH }}'/shared '${{ secrets.DEPLOY_PATH }}'/data && \
            (command -v rsync >/dev/null || (apt-get update -y && apt-get install -y rsync || yum install -y rsync || true)) \
          "

      - name: Rsync project to server
        run: |
          rsync -az --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude ".env" \
            --exclude "__pycache__" \
            --rsync-path="mkdir -p '${{ secrets.DEPLOY_PATH }}'/current && rsync" \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/current/

      - name: Ensure .env and permissions
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} bash -se <<'REMOTE'
          set -euo pipefail
          DEPLOY_PATH='${{ secrets.DEPLOY_PATH }}'

          mkdir -p "$DEPLOY_PATH/data" "$DEPLOY_PATH/current"

          if [ ! -f "$DEPLOY_PATH/.env" ]; then
            if [ -f "$DEPLOY_PATH/current/.env.example" ]; then
              cp "$DEPLOY_PATH/current/.env.example" "$DEPLOY_PATH/.env"
              echo "!!! Fill .env on server: $DEPLOY_PATH/.env"
            else
              echo "# .env created by CI â€” fill values" > "$DEPLOY_PATH/.env"
              echo "!!! Created empty .env (no .env.example in repo)"
            fi
          fi

          chown -R '${{ secrets.DEPLOY_USER }}':'${{ secrets.DEPLOY_USER }}' "$DEPLOY_PATH" || true
          REMOTE

      - name: Install deps + prime venv
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} bash -se <<'REMOTE'
          set -euo pipefail
          DEPLOY_PATH='${{ secrets.DEPLOY_PATH }}'
          VENV="$DEPLOY_PATH/venv"

          if [ ! -d "$VENV" ]; then
            python3 -m venv "$VENV"
          fi

          . "$VENV/bin/activate"
          pip -q install --upgrade pip wheel
          pip -q install -r "$DEPLOY_PATH/current/requirements.txt"
          echo "venv ready"
          REMOTE

      - name: Install/Reload systemd units and enable timer
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} bash -se <<'REMOTE'
          set -euo pipefail
          DEPLOY_PATH='${{ secrets.DEPLOY_PATH }}'

          bash "$DEPLOY_PATH/current/deploy/remote_bootstrap.sh" || true
          sudo systemctl daemon-reload || true
          sudo systemctl enable --now abcp-b24-garage-sync.timer || true
          systemctl status abcp-b24-garage-sync.timer --no-pager || true
          REMOTE

      - name: Trigger one manual run (optional smoke check)
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "sudo systemctl start abcp-b24-garage-sync.service || true"
